version: 2.1

orbs:
  node: circleci/node@5
  slack: circleci/slack@4.10.1

parameters:
  run-deploy:
    type: boolean
    default: false

executors:
  node_executor:
    docker:
      - image: cimg/node:20.5

jobs:
  install:
    executor: node_executor
    steps:
      - checkout
      - node/install-packages:
          pkg-manager: npm
      - save_cache:
          paths:
            - node_modules
          key: dependency-cache-{{ checksum "package-lock.json" }}

  lint:
    executor: node_executor
    steps:
      - checkout
      - restore_cache:
          keys:
            - dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: Lint Code
          command: npm run lint

  test:
    executor: node_executor
    steps:
      - checkout
      - restore_cache:
          keys:
            - dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: Run Unit Tests
          command: npm test
      - store_test_results:
          path: test-results

  build:
    executor: node_executor
    steps:
      - checkout
      - restore_cache:
          keys:
            - dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: Build Project
          command: npm run build
      - persist_to_workspace:
          root: .
          paths:
            - dist
            - .output
      - store_artifacts:
          path: dist
          destination: build-artifacts

  deploy:
    executor: node_executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Deploy to Production
          command: ./scripts/deploy.sh
      - persist_to_workspace:
          root: .
          paths:
            - .output

  notify:
    executor: node_executor
    steps:
      - slack/notify:
          event: always
          template: basic_success_1

workflows:
  version: 2
  pipeline:
    jobs:
      - install
      - lint:
          requires:
            - install
      - test:
          requires:
            - lint
      - build:
          requires:
            - test
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: main
          # 'when' is not valid here for workflows, so remove it and use 'run-deploy' as a conditional job in the workflow
          # when: << pipeline.parameters.run-deploy >>
          # Instead, use 'deploy' as a conditional job:
          <<: *deploy-conditional
      - notify:
          requires:
            - build
            - deploy

# Add a conditional job for deploy using 'when' at the job level
commands:
  # No custom commands needed

# Use a conditional job for deploy
workflows:
  version: 2
  pipeline:
    jobs:
      - install
      - lint:
          requires:
            - install
      - test:
          requires:
            - lint
      - build:
          requires:
            - test
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: main
          # Use 'run-deploy' parameter to conditionally run deploy
          <<: 
            when: << pipeline.parameters.run-deploy >>
      - notify:
          requires:
            - build
            - deploy
